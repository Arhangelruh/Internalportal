// <auto-generated />
using System;
using InternalPortal.Infrastucture.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InternalPortal.Infrastucture.Migrations
{
    [DbContext(typeof(InternalPortalContext))]
    [Migration("20240205110632_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InternalPortal.Infrastucture.Data.Models.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(127)
                        .HasColumnType("character varying(127)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("character varying(63)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("character varying(63)");

                    b.Property<string>("UserSid")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("character varying(63)");

                    b.HasKey("Id");

                    b.ToTable("Profiles", "dbo");
                });

            modelBuilder.Entity("InternalPortal.Infrastucture.Data.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProfileId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TestTopicId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("TestTopicId");

                    b.ToTable("Tests", "test");
                });

            modelBuilder.Entity("InternalPortal.Infrastucture.Data.Models.TestQuestionAnswers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("Meaning")
                        .HasColumnType("boolean");

                    b.Property<int>("TestQuestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TestQuestionId");

                    b.ToTable("TestQuestionAnswers", "test");
                });

            modelBuilder.Entity("InternalPortal.Infrastucture.Data.Models.TestQuestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("TestTopicId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TestTopicId");

                    b.ToTable("TestQuestions", "test");
                });

            modelBuilder.Entity("InternalPortal.Infrastucture.Data.Models.TestTopics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(127)
                        .HasColumnType("character varying(127)");

                    b.HasKey("Id");

                    b.ToTable("TestTopics", "test");
                });

            modelBuilder.Entity("InternalPortal.Infrastucture.Data.Models.TestsAnswers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnswerId")
                        .HasColumnType("integer");

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("TestId");

                    b.ToTable("TestsAnswers", "test");
                });

            modelBuilder.Entity("InternalPortal.Infrastucture.Data.Models.Test", b =>
                {
                    b.HasOne("InternalPortal.Infrastucture.Data.Models.Profile", "Profile")
                        .WithMany("Tests")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InternalPortal.Infrastucture.Data.Models.TestTopics", "TestTopic")
                        .WithMany("Tests")
                        .HasForeignKey("TestTopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("TestTopic");
                });

            modelBuilder.Entity("InternalPortal.Infrastucture.Data.Models.TestQuestionAnswers", b =>
                {
                    b.HasOne("InternalPortal.Infrastucture.Data.Models.TestQuestions", "TestQuestion")
                        .WithMany("TestAnswers")
                        .HasForeignKey("TestQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TestQuestion");
                });

            modelBuilder.Entity("InternalPortal.Infrastucture.Data.Models.TestQuestions", b =>
                {
                    b.HasOne("InternalPortal.Infrastucture.Data.Models.TestTopics", "TestTopic")
                        .WithMany("TestQuestions")
                        .HasForeignKey("TestTopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TestTopic");
                });

            modelBuilder.Entity("InternalPortal.Infrastucture.Data.Models.TestsAnswers", b =>
                {
                    b.HasOne("InternalPortal.Infrastucture.Data.Models.TestQuestionAnswers", "TestQuestionAnswer")
                        .WithMany("TestsAnswers")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InternalPortal.Infrastucture.Data.Models.Test", "Test")
                        .WithMany("TestsAnswers")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("TestQuestionAnswer");
                });

            modelBuilder.Entity("InternalPortal.Infrastucture.Data.Models.Profile", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("InternalPortal.Infrastucture.Data.Models.Test", b =>
                {
                    b.Navigation("TestsAnswers");
                });

            modelBuilder.Entity("InternalPortal.Infrastucture.Data.Models.TestQuestionAnswers", b =>
                {
                    b.Navigation("TestsAnswers");
                });

            modelBuilder.Entity("InternalPortal.Infrastucture.Data.Models.TestQuestions", b =>
                {
                    b.Navigation("TestAnswers");
                });

            modelBuilder.Entity("InternalPortal.Infrastucture.Data.Models.TestTopics", b =>
                {
                    b.Navigation("TestQuestions");

                    b.Navigation("Tests");
                });
#pragma warning restore 612, 618
        }
    }
}
